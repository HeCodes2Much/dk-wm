#!/bin/sh

# (re)load sxhkd for keybinds
pkill sxhkd; sxhkd &


# determine where to place the log file
logfile="$HOME/.yaxcmd.log"
[ -d "$HOME/.local/share/xorg" ] && logfile="$HOME/.local/share/xorg/yaxcmd.log"
: > "$logfile"

# Window manager configuration run as a compound command to
# redirect all output to the log file without redirecting each command.
# Not needed but it's nice to be able to tell when there are errors.
{
	# workspace settings
	# ------------------------
	# defaults to use when allocating new workspaces
	yaxcmd ws default layout=tile master=1 stack=3 gap=0 split=0.55 ssplit=0.55

	# allocate 10 workspaces total 1-10, default is one per monitor
	# if successful, set workspace 10 to use some padding
	yaxcmd ws alloc=10 && yaxcmd set ws=10 pad l=400 r=400 t=100 b=100

	# mouse window control
	# ---------------------
	# define mouse mod and move/resize buttons
	yaxcmd mouse mod=alt move=button1 resize=button3


	# borders and gaps
	# ---------
	# disable gaps and borders in monocle layout and tile layout with one window
	yaxcmd set gap smart=1
	yaxcmd set border smart=1

	# set border width in pixels to an absolute value
	yaxcmd set border width absolute=1

	# set the border colour for focused, unfocused, and urgent windows
	yaxcmd set border colour focus   '#6699cc'
	yaxcmd set border colour unfocus '#000000'
	yaxcmd set border colour urgent  '#ee5555'


	# window rules
	# --------------
	# open window(s) on a specific workspace
	yaxcmd rule class="^gimp$" ws=2

	# open window(s) on a monitor by number or by name
	yaxcmd rule class="^firefox$"  mon=1
	yaxcmd rule class="^chromium$" mon="HDMI-A-0"

	# open window(s) and use a callback function (defined in config.h)
	yaxcmd rule class="^mpv$" instance="^gl$" floating callback=albumart bw=0

	# open window(s) in a floating state
	yaxcmd rule class="^(pavucontrol|transmission-gtk|steam|lxappearance)$" floating

	# open window(s) with a specific geometry and coordinates (floating windows only!)
	yaxcmd rule class="^google-chrome$" title="^open files$" floating w=1280 h=720

} >> "$logfile" 2>&1 # append responses

# inform of any errors in a notification
if grep -q 'error:' "$logfile"; then
	hash notify-send && notify-send -t 0 -u critical "Yaxwmrc Has Errors" \
		"$(awk '/error:/ {sub(/^error: /, ""); print}' "$logfile")"
	exit 1
fi

exit 0
